
user_board_led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000684  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000056c  20070000  00080684  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000040  2007056c  00080bf0  0002056c  2**2
                  ALLOC
  3 .stack        00002004  200705ac  00080c30  0002056c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020595  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000781e  00000000  00000000  000205ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001269  00000000  00000000  00027e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000310  00000000  00000000  00029075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000002a8  00000000  00000000  00029385  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00014de3  00000000  00000000  0002962d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000066c0  00000000  00000000  0003e410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00061575  00000000  00000000  00044ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000073c  00000000  00000000  000a6048  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000cf0  00000000  00000000  000a6784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b0 25 07 20 d1 02 08 00 cf 02 08 00 cf 02 08 00     .%. ............
   80010:	cf 02 08 00 cf 02 08 00 cf 02 08 00 00 00 00 00     ................
	...
   8002c:	cf 02 08 00 cf 02 08 00 00 00 00 00 cf 02 08 00     ................
   8003c:	cf 02 08 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................
   8004c:	cf 02 08 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................
   8005c:	cf 02 08 00 cf 02 08 00 cf 02 08 00 00 00 00 00     ................
   8006c:	cf 02 08 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................
	...
   80084:	cf 02 08 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................
   80094:	cf 02 08 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................
   800a4:	00 00 00 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................
   800b4:	cf 02 08 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................
   800c4:	cf 02 08 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................
   800d4:	cf 02 08 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................
   800e4:	cf 02 08 00 cf 02 08 00 cf 02 08 00 cf 02 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007056c 	.word	0x2007056c
   80110:	00000000 	.word	0x00000000
   80114:	00080684 	.word	0x00080684

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080684 	.word	0x00080684
   80154:	20070570 	.word	0x20070570
   80158:	00080684 	.word	0x00080684
   8015c:	00000000 	.word	0x00000000

00080160 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80160:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80162:	480e      	ldr	r0, [pc, #56]	; (8019c <sysclk_init+0x3c>)
   80164:	4b0e      	ldr	r3, [pc, #56]	; (801a0 <sysclk_init+0x40>)
   80166:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80168:	213e      	movs	r1, #62	; 0x3e
   8016a:	2000      	movs	r0, #0
   8016c:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x44>)
   8016e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80170:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x48>)
   80172:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80174:	2800      	cmp	r0, #0
   80176:	d0fc      	beq.n	80172 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80178:	4b0c      	ldr	r3, [pc, #48]	; (801ac <sysclk_init+0x4c>)
   8017a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8017c:	4a0c      	ldr	r2, [pc, #48]	; (801b0 <sysclk_init+0x50>)
   8017e:	4b0d      	ldr	r3, [pc, #52]	; (801b4 <sysclk_init+0x54>)
   80180:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80182:	4c0d      	ldr	r4, [pc, #52]	; (801b8 <sysclk_init+0x58>)
   80184:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80186:	2800      	cmp	r0, #0
   80188:	d0fc      	beq.n	80184 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8018a:	2010      	movs	r0, #16
   8018c:	4b0b      	ldr	r3, [pc, #44]	; (801bc <sysclk_init+0x5c>)
   8018e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80190:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <sysclk_init+0x60>)
   80192:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80194:	4801      	ldr	r0, [pc, #4]	; (8019c <sysclk_init+0x3c>)
   80196:	4b02      	ldr	r3, [pc, #8]	; (801a0 <sysclk_init+0x40>)
   80198:	4798      	blx	r3
   8019a:	bd10      	pop	{r4, pc}
   8019c:	0501bd00 	.word	0x0501bd00
   801a0:	200700b1 	.word	0x200700b1
   801a4:	00080229 	.word	0x00080229
   801a8:	0008027d 	.word	0x0008027d
   801ac:	0008028d 	.word	0x0008028d
   801b0:	200d3f01 	.word	0x200d3f01
   801b4:	400e0600 	.word	0x400e0600
   801b8:	0008029d 	.word	0x0008029d
   801bc:	000801c5 	.word	0x000801c5
   801c0:	00080369 	.word	0x00080369

000801c4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   801c4:	4a17      	ldr	r2, [pc, #92]	; (80224 <pmc_switch_mck_to_pllack+0x60>)
   801c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   801c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   801cc:	4318      	orrs	r0, r3
   801ce:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   801d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   801d2:	f013 0f08 	tst.w	r3, #8
   801d6:	d10a      	bne.n	801ee <pmc_switch_mck_to_pllack+0x2a>
   801d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   801dc:	4911      	ldr	r1, [pc, #68]	; (80224 <pmc_switch_mck_to_pllack+0x60>)
   801de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   801e0:	f012 0f08 	tst.w	r2, #8
   801e4:	d103      	bne.n	801ee <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   801e6:	3b01      	subs	r3, #1
   801e8:	d1f9      	bne.n	801de <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   801ea:	2001      	movs	r0, #1
   801ec:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   801ee:	4a0d      	ldr	r2, [pc, #52]	; (80224 <pmc_switch_mck_to_pllack+0x60>)
   801f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   801f2:	f023 0303 	bic.w	r3, r3, #3
   801f6:	f043 0302 	orr.w	r3, r3, #2
   801fa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   801fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   801fe:	f013 0f08 	tst.w	r3, #8
   80202:	d10a      	bne.n	8021a <pmc_switch_mck_to_pllack+0x56>
   80204:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80208:	4906      	ldr	r1, [pc, #24]	; (80224 <pmc_switch_mck_to_pllack+0x60>)
   8020a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8020c:	f012 0f08 	tst.w	r2, #8
   80210:	d105      	bne.n	8021e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80212:	3b01      	subs	r3, #1
   80214:	d1f9      	bne.n	8020a <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80216:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80218:	4770      	bx	lr
	return 0;
   8021a:	2000      	movs	r0, #0
   8021c:	4770      	bx	lr
   8021e:	2000      	movs	r0, #0
   80220:	4770      	bx	lr
   80222:	bf00      	nop
   80224:	400e0600 	.word	0x400e0600

00080228 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80228:	b9c8      	cbnz	r0, 8025e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8022a:	4a11      	ldr	r2, [pc, #68]	; (80270 <pmc_switch_mainck_to_xtal+0x48>)
   8022c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8022e:	0209      	lsls	r1, r1, #8
   80230:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80232:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80236:	f023 0303 	bic.w	r3, r3, #3
   8023a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8023e:	f043 0301 	orr.w	r3, r3, #1
   80242:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80244:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80246:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80248:	f013 0f01 	tst.w	r3, #1
   8024c:	d0fb      	beq.n	80246 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8024e:	4a08      	ldr	r2, [pc, #32]	; (80270 <pmc_switch_mainck_to_xtal+0x48>)
   80250:	6a13      	ldr	r3, [r2, #32]
   80252:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8025a:	6213      	str	r3, [r2, #32]
   8025c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8025e:	4904      	ldr	r1, [pc, #16]	; (80270 <pmc_switch_mainck_to_xtal+0x48>)
   80260:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80262:	4a04      	ldr	r2, [pc, #16]	; (80274 <pmc_switch_mainck_to_xtal+0x4c>)
   80264:	401a      	ands	r2, r3
   80266:	4b04      	ldr	r3, [pc, #16]	; (80278 <pmc_switch_mainck_to_xtal+0x50>)
   80268:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8026a:	620b      	str	r3, [r1, #32]
   8026c:	4770      	bx	lr
   8026e:	bf00      	nop
   80270:	400e0600 	.word	0x400e0600
   80274:	fec8fffc 	.word	0xfec8fffc
   80278:	01370002 	.word	0x01370002

0008027c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8027c:	4b02      	ldr	r3, [pc, #8]	; (80288 <pmc_osc_is_ready_mainck+0xc>)
   8027e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80280:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80284:	4770      	bx	lr
   80286:	bf00      	nop
   80288:	400e0600 	.word	0x400e0600

0008028c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8028c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80290:	4b01      	ldr	r3, [pc, #4]	; (80298 <pmc_disable_pllack+0xc>)
   80292:	629a      	str	r2, [r3, #40]	; 0x28
   80294:	4770      	bx	lr
   80296:	bf00      	nop
   80298:	400e0600 	.word	0x400e0600

0008029c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8029c:	4b02      	ldr	r3, [pc, #8]	; (802a8 <pmc_is_locked_pllack+0xc>)
   8029e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   802a0:	f000 0002 	and.w	r0, r0, #2
   802a4:	4770      	bx	lr
   802a6:	bf00      	nop
   802a8:	400e0600 	.word	0x400e0600

000802ac <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   802ac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   802b0:	4b05      	ldr	r3, [pc, #20]	; (802c8 <pmc_enable_periph_clk+0x1c>)
   802b2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   802b6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   802ba:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   802be:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   802c2:	2000      	movs	r0, #0
   802c4:	4770      	bx	lr
   802c6:	bf00      	nop
   802c8:	400e0600 	.word	0x400e0600

000802cc <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   802cc:	4770      	bx	lr

000802ce <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   802ce:	e7fe      	b.n	802ce <Dummy_Handler>

000802d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   802d0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   802d2:	4b1c      	ldr	r3, [pc, #112]	; (80344 <Reset_Handler+0x74>)
   802d4:	4a1c      	ldr	r2, [pc, #112]	; (80348 <Reset_Handler+0x78>)
   802d6:	429a      	cmp	r2, r3
   802d8:	d010      	beq.n	802fc <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   802da:	4b1c      	ldr	r3, [pc, #112]	; (8034c <Reset_Handler+0x7c>)
   802dc:	4a19      	ldr	r2, [pc, #100]	; (80344 <Reset_Handler+0x74>)
   802de:	429a      	cmp	r2, r3
   802e0:	d20c      	bcs.n	802fc <Reset_Handler+0x2c>
   802e2:	3b01      	subs	r3, #1
   802e4:	1a9b      	subs	r3, r3, r2
   802e6:	f023 0303 	bic.w	r3, r3, #3
   802ea:	3304      	adds	r3, #4
   802ec:	4413      	add	r3, r2
   802ee:	4916      	ldr	r1, [pc, #88]	; (80348 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   802f0:	f851 0b04 	ldr.w	r0, [r1], #4
   802f4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   802f8:	429a      	cmp	r2, r3
   802fa:	d1f9      	bne.n	802f0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   802fc:	4b14      	ldr	r3, [pc, #80]	; (80350 <Reset_Handler+0x80>)
   802fe:	4a15      	ldr	r2, [pc, #84]	; (80354 <Reset_Handler+0x84>)
   80300:	429a      	cmp	r2, r3
   80302:	d20a      	bcs.n	8031a <Reset_Handler+0x4a>
   80304:	3b01      	subs	r3, #1
   80306:	1a9b      	subs	r3, r3, r2
   80308:	f023 0303 	bic.w	r3, r3, #3
   8030c:	3304      	adds	r3, #4
   8030e:	4413      	add	r3, r2
		*pDest++ = 0;
   80310:	2100      	movs	r1, #0
   80312:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80316:	4293      	cmp	r3, r2
   80318:	d1fb      	bne.n	80312 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8031a:	4b0f      	ldr	r3, [pc, #60]	; (80358 <Reset_Handler+0x88>)
   8031c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80320:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80324:	490d      	ldr	r1, [pc, #52]	; (8035c <Reset_Handler+0x8c>)
   80326:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80328:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8032c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80330:	d203      	bcs.n	8033a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80332:	688b      	ldr	r3, [r1, #8]
   80334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80338:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8033a:	4b09      	ldr	r3, [pc, #36]	; (80360 <Reset_Handler+0x90>)
   8033c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8033e:	4b09      	ldr	r3, [pc, #36]	; (80364 <Reset_Handler+0x94>)
   80340:	4798      	blx	r3
   80342:	e7fe      	b.n	80342 <Reset_Handler+0x72>
   80344:	20070000 	.word	0x20070000
   80348:	00080684 	.word	0x00080684
   8034c:	2007056c 	.word	0x2007056c
   80350:	200705ac 	.word	0x200705ac
   80354:	2007056c 	.word	0x2007056c
   80358:	00080000 	.word	0x00080000
   8035c:	e000ed00 	.word	0xe000ed00
   80360:	000804ed 	.word	0x000804ed
   80364:	00080481 	.word	0x00080481

00080368 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80368:	4b3d      	ldr	r3, [pc, #244]	; (80460 <SystemCoreClockUpdate+0xf8>)
   8036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8036c:	f003 0303 	and.w	r3, r3, #3
   80370:	2b03      	cmp	r3, #3
   80372:	d80e      	bhi.n	80392 <SystemCoreClockUpdate+0x2a>
   80374:	e8df f003 	tbb	[pc, r3]
   80378:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8037c:	4b39      	ldr	r3, [pc, #228]	; (80464 <SystemCoreClockUpdate+0xfc>)
   8037e:	695b      	ldr	r3, [r3, #20]
   80380:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80384:	bf14      	ite	ne
   80386:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8038a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8038e:	4b36      	ldr	r3, [pc, #216]	; (80468 <SystemCoreClockUpdate+0x100>)
   80390:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80392:	4b33      	ldr	r3, [pc, #204]	; (80460 <SystemCoreClockUpdate+0xf8>)
   80394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80396:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8039a:	2b70      	cmp	r3, #112	; 0x70
   8039c:	d057      	beq.n	8044e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8039e:	4b30      	ldr	r3, [pc, #192]	; (80460 <SystemCoreClockUpdate+0xf8>)
   803a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   803a2:	4931      	ldr	r1, [pc, #196]	; (80468 <SystemCoreClockUpdate+0x100>)
   803a4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   803a8:	680b      	ldr	r3, [r1, #0]
   803aa:	40d3      	lsrs	r3, r2
   803ac:	600b      	str	r3, [r1, #0]
   803ae:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   803b0:	4b2b      	ldr	r3, [pc, #172]	; (80460 <SystemCoreClockUpdate+0xf8>)
   803b2:	6a1b      	ldr	r3, [r3, #32]
   803b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   803b8:	d003      	beq.n	803c2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   803ba:	4a2c      	ldr	r2, [pc, #176]	; (8046c <SystemCoreClockUpdate+0x104>)
   803bc:	4b2a      	ldr	r3, [pc, #168]	; (80468 <SystemCoreClockUpdate+0x100>)
   803be:	601a      	str	r2, [r3, #0]
   803c0:	e7e7      	b.n	80392 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   803c2:	4a2b      	ldr	r2, [pc, #172]	; (80470 <SystemCoreClockUpdate+0x108>)
   803c4:	4b28      	ldr	r3, [pc, #160]	; (80468 <SystemCoreClockUpdate+0x100>)
   803c6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   803c8:	4b25      	ldr	r3, [pc, #148]	; (80460 <SystemCoreClockUpdate+0xf8>)
   803ca:	6a1b      	ldr	r3, [r3, #32]
   803cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   803d0:	2b10      	cmp	r3, #16
   803d2:	d005      	beq.n	803e0 <SystemCoreClockUpdate+0x78>
   803d4:	2b20      	cmp	r3, #32
   803d6:	d1dc      	bne.n	80392 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   803d8:	4a24      	ldr	r2, [pc, #144]	; (8046c <SystemCoreClockUpdate+0x104>)
   803da:	4b23      	ldr	r3, [pc, #140]	; (80468 <SystemCoreClockUpdate+0x100>)
   803dc:	601a      	str	r2, [r3, #0]
				break;
   803de:	e7d8      	b.n	80392 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   803e0:	4a24      	ldr	r2, [pc, #144]	; (80474 <SystemCoreClockUpdate+0x10c>)
   803e2:	4b21      	ldr	r3, [pc, #132]	; (80468 <SystemCoreClockUpdate+0x100>)
   803e4:	601a      	str	r2, [r3, #0]
				break;
   803e6:	e7d4      	b.n	80392 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   803e8:	4b1d      	ldr	r3, [pc, #116]	; (80460 <SystemCoreClockUpdate+0xf8>)
   803ea:	6a1b      	ldr	r3, [r3, #32]
   803ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   803f0:	d00c      	beq.n	8040c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   803f2:	4a1e      	ldr	r2, [pc, #120]	; (8046c <SystemCoreClockUpdate+0x104>)
   803f4:	4b1c      	ldr	r3, [pc, #112]	; (80468 <SystemCoreClockUpdate+0x100>)
   803f6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   803f8:	4b19      	ldr	r3, [pc, #100]	; (80460 <SystemCoreClockUpdate+0xf8>)
   803fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   803fc:	f003 0303 	and.w	r3, r3, #3
   80400:	2b02      	cmp	r3, #2
   80402:	d016      	beq.n	80432 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80404:	4a1c      	ldr	r2, [pc, #112]	; (80478 <SystemCoreClockUpdate+0x110>)
   80406:	4b18      	ldr	r3, [pc, #96]	; (80468 <SystemCoreClockUpdate+0x100>)
   80408:	601a      	str	r2, [r3, #0]
   8040a:	e7c2      	b.n	80392 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8040c:	4a18      	ldr	r2, [pc, #96]	; (80470 <SystemCoreClockUpdate+0x108>)
   8040e:	4b16      	ldr	r3, [pc, #88]	; (80468 <SystemCoreClockUpdate+0x100>)
   80410:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80412:	4b13      	ldr	r3, [pc, #76]	; (80460 <SystemCoreClockUpdate+0xf8>)
   80414:	6a1b      	ldr	r3, [r3, #32]
   80416:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8041a:	2b10      	cmp	r3, #16
   8041c:	d005      	beq.n	8042a <SystemCoreClockUpdate+0xc2>
   8041e:	2b20      	cmp	r3, #32
   80420:	d1ea      	bne.n	803f8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80422:	4a12      	ldr	r2, [pc, #72]	; (8046c <SystemCoreClockUpdate+0x104>)
   80424:	4b10      	ldr	r3, [pc, #64]	; (80468 <SystemCoreClockUpdate+0x100>)
   80426:	601a      	str	r2, [r3, #0]
				break;
   80428:	e7e6      	b.n	803f8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8042a:	4a12      	ldr	r2, [pc, #72]	; (80474 <SystemCoreClockUpdate+0x10c>)
   8042c:	4b0e      	ldr	r3, [pc, #56]	; (80468 <SystemCoreClockUpdate+0x100>)
   8042e:	601a      	str	r2, [r3, #0]
				break;
   80430:	e7e2      	b.n	803f8 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80432:	4a0b      	ldr	r2, [pc, #44]	; (80460 <SystemCoreClockUpdate+0xf8>)
   80434:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80436:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80438:	480b      	ldr	r0, [pc, #44]	; (80468 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8043a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8043e:	6803      	ldr	r3, [r0, #0]
   80440:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80444:	b2d2      	uxtb	r2, r2
   80446:	fbb3 f3f2 	udiv	r3, r3, r2
   8044a:	6003      	str	r3, [r0, #0]
   8044c:	e7a1      	b.n	80392 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8044e:	4a06      	ldr	r2, [pc, #24]	; (80468 <SystemCoreClockUpdate+0x100>)
   80450:	6813      	ldr	r3, [r2, #0]
   80452:	490a      	ldr	r1, [pc, #40]	; (8047c <SystemCoreClockUpdate+0x114>)
   80454:	fba1 1303 	umull	r1, r3, r1, r3
   80458:	085b      	lsrs	r3, r3, #1
   8045a:	6013      	str	r3, [r2, #0]
   8045c:	4770      	bx	lr
   8045e:	bf00      	nop
   80460:	400e0600 	.word	0x400e0600
   80464:	400e1a10 	.word	0x400e1a10
   80468:	20070138 	.word	0x20070138
   8046c:	00b71b00 	.word	0x00b71b00
   80470:	003d0900 	.word	0x003d0900
   80474:	007a1200 	.word	0x007a1200
   80478:	0e4e1c00 	.word	0x0e4e1c00
   8047c:	aaaaaaab 	.word	0xaaaaaaab

00080480 <main>:
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
#include <asf.h>

int main (void)
{
   80480:	b508      	push	{r3, lr}
	
	sysclk_init();
   80482:	4b13      	ldr	r3, [pc, #76]	; (804d0 <main+0x50>)
   80484:	4798      	blx	r3
	board_init();
   80486:	4b13      	ldr	r3, [pc, #76]	; (804d4 <main+0x54>)
   80488:	4798      	blx	r3
	
	WDT->WDT_MR = WDT_MR_WDDIS;                         
   8048a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8048e:	4b12      	ldr	r3, [pc, #72]	; (804d8 <main+0x58>)
   80490:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80492:	200b      	movs	r0, #11
   80494:	4c11      	ldr	r4, [pc, #68]	; (804dc <main+0x5c>)
   80496:	47a0      	blx	r4
   80498:	200c      	movs	r0, #12
   8049a:	47a0      	blx	r4
   8049c:	200d      	movs	r0, #13
   8049e:	47a0      	blx	r4
   804a0:	200e      	movs	r0, #14
   804a2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804a4:	4b0e      	ldr	r3, [pc, #56]	; (804e0 <main+0x60>)
   804a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   804aa:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804b0:	631a      	str	r2, [r3, #48]	; 0x30
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   804b2:	461c      	mov	r4, r3
	ioport_set_pin_level(LED0_GPIO, IOPORT_PIN_LEVEL_HIGH);  
  
   
	while (1) {
		ioport_toggle_pin_level(LED0_GPIO);
		delay_ms(1000);
   804b4:	4e0b      	ldr	r6, [pc, #44]	; (804e4 <main+0x64>)
   804b6:	4d0c      	ldr	r5, [pc, #48]	; (804e8 <main+0x68>)
   804b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   804ba:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		port->PIO_CODR = mask;
   804be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   804c2:	bf14      	ite	ne
   804c4:	6363      	strne	r3, [r4, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   804c6:	6323      	streq	r3, [r4, #48]	; 0x30
   804c8:	4630      	mov	r0, r6
   804ca:	47a8      	blx	r5
		ioport_toggle_pin_level(LED0_GPIO);
   804cc:	e7f4      	b.n	804b8 <main+0x38>
   804ce:	bf00      	nop
   804d0:	00080161 	.word	0x00080161
   804d4:	000802cd 	.word	0x000802cd
   804d8:	400e1a50 	.word	0x400e1a50
   804dc:	000802ad 	.word	0x000802ad
   804e0:	400e1000 	.word	0x400e1000
   804e4:	005b8d80 	.word	0x005b8d80
   804e8:	20070001 	.word	0x20070001

000804ec <__libc_init_array>:
   804ec:	b570      	push	{r4, r5, r6, lr}
   804ee:	4e0f      	ldr	r6, [pc, #60]	; (8052c <__libc_init_array+0x40>)
   804f0:	4d0f      	ldr	r5, [pc, #60]	; (80530 <__libc_init_array+0x44>)
   804f2:	1b76      	subs	r6, r6, r5
   804f4:	10b6      	asrs	r6, r6, #2
   804f6:	bf18      	it	ne
   804f8:	2400      	movne	r4, #0
   804fa:	d005      	beq.n	80508 <__libc_init_array+0x1c>
   804fc:	3401      	adds	r4, #1
   804fe:	f855 3b04 	ldr.w	r3, [r5], #4
   80502:	4798      	blx	r3
   80504:	42a6      	cmp	r6, r4
   80506:	d1f9      	bne.n	804fc <__libc_init_array+0x10>
   80508:	4e0a      	ldr	r6, [pc, #40]	; (80534 <__libc_init_array+0x48>)
   8050a:	4d0b      	ldr	r5, [pc, #44]	; (80538 <__libc_init_array+0x4c>)
   8050c:	f000 f8a8 	bl	80660 <_init>
   80510:	1b76      	subs	r6, r6, r5
   80512:	10b6      	asrs	r6, r6, #2
   80514:	bf18      	it	ne
   80516:	2400      	movne	r4, #0
   80518:	d006      	beq.n	80528 <__libc_init_array+0x3c>
   8051a:	3401      	adds	r4, #1
   8051c:	f855 3b04 	ldr.w	r3, [r5], #4
   80520:	4798      	blx	r3
   80522:	42a6      	cmp	r6, r4
   80524:	d1f9      	bne.n	8051a <__libc_init_array+0x2e>
   80526:	bd70      	pop	{r4, r5, r6, pc}
   80528:	bd70      	pop	{r4, r5, r6, pc}
   8052a:	bf00      	nop
   8052c:	0008066c 	.word	0x0008066c
   80530:	0008066c 	.word	0x0008066c
   80534:	00080674 	.word	0x00080674
   80538:	0008066c 	.word	0x0008066c

0008053c <register_fini>:
   8053c:	4b02      	ldr	r3, [pc, #8]	; (80548 <register_fini+0xc>)
   8053e:	b113      	cbz	r3, 80546 <register_fini+0xa>
   80540:	4802      	ldr	r0, [pc, #8]	; (8054c <register_fini+0x10>)
   80542:	f000 b805 	b.w	80550 <atexit>
   80546:	4770      	bx	lr
   80548:	00000000 	.word	0x00000000
   8054c:	0008055d 	.word	0x0008055d

00080550 <atexit>:
   80550:	2300      	movs	r3, #0
   80552:	4601      	mov	r1, r0
   80554:	461a      	mov	r2, r3
   80556:	4618      	mov	r0, r3
   80558:	f000 b81e 	b.w	80598 <__register_exitproc>

0008055c <__libc_fini_array>:
   8055c:	b538      	push	{r3, r4, r5, lr}
   8055e:	4c0a      	ldr	r4, [pc, #40]	; (80588 <__libc_fini_array+0x2c>)
   80560:	4d0a      	ldr	r5, [pc, #40]	; (8058c <__libc_fini_array+0x30>)
   80562:	1b64      	subs	r4, r4, r5
   80564:	10a4      	asrs	r4, r4, #2
   80566:	d00a      	beq.n	8057e <__libc_fini_array+0x22>
   80568:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8056c:	3b01      	subs	r3, #1
   8056e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80572:	3c01      	subs	r4, #1
   80574:	f855 3904 	ldr.w	r3, [r5], #-4
   80578:	4798      	blx	r3
   8057a:	2c00      	cmp	r4, #0
   8057c:	d1f9      	bne.n	80572 <__libc_fini_array+0x16>
   8057e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80582:	f000 b877 	b.w	80674 <_fini>
   80586:	bf00      	nop
   80588:	00080684 	.word	0x00080684
   8058c:	00080680 	.word	0x00080680

00080590 <__retarget_lock_acquire_recursive>:
   80590:	4770      	bx	lr
   80592:	bf00      	nop

00080594 <__retarget_lock_release_recursive>:
   80594:	4770      	bx	lr
   80596:	bf00      	nop

00080598 <__register_exitproc>:
   80598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8059c:	4d2c      	ldr	r5, [pc, #176]	; (80650 <__register_exitproc+0xb8>)
   8059e:	4606      	mov	r6, r0
   805a0:	6828      	ldr	r0, [r5, #0]
   805a2:	4698      	mov	r8, r3
   805a4:	460f      	mov	r7, r1
   805a6:	4691      	mov	r9, r2
   805a8:	f7ff fff2 	bl	80590 <__retarget_lock_acquire_recursive>
   805ac:	4b29      	ldr	r3, [pc, #164]	; (80654 <__register_exitproc+0xbc>)
   805ae:	681c      	ldr	r4, [r3, #0]
   805b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   805b4:	2b00      	cmp	r3, #0
   805b6:	d03e      	beq.n	80636 <__register_exitproc+0x9e>
   805b8:	685a      	ldr	r2, [r3, #4]
   805ba:	2a1f      	cmp	r2, #31
   805bc:	dc1c      	bgt.n	805f8 <__register_exitproc+0x60>
   805be:	f102 0e01 	add.w	lr, r2, #1
   805c2:	b176      	cbz	r6, 805e2 <__register_exitproc+0x4a>
   805c4:	2101      	movs	r1, #1
   805c6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   805ca:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   805ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   805d2:	4091      	lsls	r1, r2
   805d4:	4308      	orrs	r0, r1
   805d6:	2e02      	cmp	r6, #2
   805d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   805dc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   805e0:	d023      	beq.n	8062a <__register_exitproc+0x92>
   805e2:	3202      	adds	r2, #2
   805e4:	f8c3 e004 	str.w	lr, [r3, #4]
   805e8:	6828      	ldr	r0, [r5, #0]
   805ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   805ee:	f7ff ffd1 	bl	80594 <__retarget_lock_release_recursive>
   805f2:	2000      	movs	r0, #0
   805f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   805f8:	4b17      	ldr	r3, [pc, #92]	; (80658 <__register_exitproc+0xc0>)
   805fa:	b30b      	cbz	r3, 80640 <__register_exitproc+0xa8>
   805fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80600:	f3af 8000 	nop.w
   80604:	4603      	mov	r3, r0
   80606:	b1d8      	cbz	r0, 80640 <__register_exitproc+0xa8>
   80608:	2000      	movs	r0, #0
   8060a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8060e:	f04f 0e01 	mov.w	lr, #1
   80612:	6058      	str	r0, [r3, #4]
   80614:	6019      	str	r1, [r3, #0]
   80616:	4602      	mov	r2, r0
   80618:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8061c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80620:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80624:	2e00      	cmp	r6, #0
   80626:	d0dc      	beq.n	805e2 <__register_exitproc+0x4a>
   80628:	e7cc      	b.n	805c4 <__register_exitproc+0x2c>
   8062a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8062e:	4301      	orrs	r1, r0
   80630:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80634:	e7d5      	b.n	805e2 <__register_exitproc+0x4a>
   80636:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8063a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8063e:	e7bb      	b.n	805b8 <__register_exitproc+0x20>
   80640:	6828      	ldr	r0, [r5, #0]
   80642:	f7ff ffa7 	bl	80594 <__retarget_lock_release_recursive>
   80646:	f04f 30ff 	mov.w	r0, #4294967295
   8064a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8064e:	bf00      	nop
   80650:	20070568 	.word	0x20070568
   80654:	0008065c 	.word	0x0008065c
   80658:	00000000 	.word	0x00000000

0008065c <_global_impure_ptr>:
   8065c:	20070140                                @.. 

00080660 <_init>:
   80660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80662:	bf00      	nop
   80664:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80666:	bc08      	pop	{r3}
   80668:	469e      	mov	lr, r3
   8066a:	4770      	bx	lr

0008066c <__init_array_start>:
   8066c:	0008053d 	.word	0x0008053d

00080670 <__frame_dummy_init_array_entry>:
   80670:	00080119                                ....

00080674 <_fini>:
   80674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80676:	bf00      	nop
   80678:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8067a:	bc08      	pop	{r3}
   8067c:	469e      	mov	lr, r3
   8067e:	4770      	bx	lr

00080680 <__fini_array_start>:
   80680:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <__atexit_recursive_mutex>:
20070568:	20070588                                ... 
